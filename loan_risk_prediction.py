# -*- coding: utf-8 -*-
"""Loan_risk_prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fGx5YdtYVK5bgiS6YLnGzHDs5bz6UywE
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

from google.colab import files
uploaded = files.upload()
df = pd.read_csv("Training Data.csv")

df.drop("Id", axis=1, inplace=True)


binary_cols = ['Married/Single', 'Car_Ownership']
le = LabelEncoder()
for col in binary_cols:
    df[col] = le.fit_transform(df[col])


df = pd.get_dummies(df, columns=['House_Ownership', 'Profession', 'CITY', 'STATE'], drop_first=True)


X = df.drop("Risk_Flag", axis=1)
y = df["Risk_Flag"]

X = (X - X.mean()) / X.std()


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = Sequential([
    Dense(32, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(16, activation='relu'),
    Dense(1, activation='sigmoid')
])


model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])


model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))


loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")